<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wnn.system.mapper.UserMapper">
<!--  用户查询基本信息-->
  <resultMap id="BaseResultMap" type="com.wnn.system.domain.system.User">
    <id column="userId" jdbcType="VARCHAR" property="userId" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="userPassword" jdbcType="VARCHAR" property="userPassword" />
    <result column="userStatus" jdbcType="INTEGER" property="userStatus" />
    <result column="employeeId" jdbcType="VARCHAR" property="employeeId" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createTime" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>

<!--  链表查询封装-->
  <resultMap id="userAndRoleList" type="com.wnn.system.domain.system.vo.UserVo" extends="BaseResultMap">
    <collection property="roles"   resultMap="com.wnn.system.mapper.RoleMapper.BaseResultMap"/>
  </resultMap>

  <sql id="Example_Where_Clause">

    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">

    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">

    userId, username, userPassword, userStatus, employeeId, createTime, updateTime
  </sql>
  <select id="selectByExample" parameterType="com.wnn.system.domain.system.UserExample" resultMap="BaseResultMap">

    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.wnn.system.domain.system.UserExample">

    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <select id="countByExample" parameterType="com.wnn.system.domain.system.UserExample" resultType="java.lang.Long">

    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.userId != null">
        userId = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.userPassword != null">
        userPassword = #{record.userPassword,jdbcType=VARCHAR},
      </if>
      <if test="record.userStatus != null">
        userStatus = #{record.userStatus,jdbcType=INTEGER},
      </if>
      <if test="record.employeeId != null">
        employeeId = #{record.employeeId,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        createTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        updateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">

    update user
    set userId = #{record.userId,jdbcType=VARCHAR},
    username = #{record.username,jdbcType=VARCHAR},
    userPassword = #{record.userPassword,jdbcType=VARCHAR},
    userStatus = #{record.userStatus,jdbcType=INTEGER},
    employeeId = #{record.employeeId,jdbcType=VARCHAR},
    createTime = #{record.createTime,jdbcType=TIMESTAMP},
    updateTime = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

  <select id="selectUserHaveRoles" resultType="java.util.Map">
        SELECT u.*,r.* FROM `user` u  LEFT JOIN user_role ur on u.userId = ur.userId  LEFT JOIN role r on r.roleId = ur.roleId
    </select>

<!--  查询用户列表包含角色封装信息-->
  <select id="findUserList" resultMap="userAndRoleList">
        SELECT * FROM user  u
        left  JOIN user_role ur on u .userId = ur.userid
        left  JOIN role  r on r.roleId = ur.roleId
        ORDER BY u.username
  </select>

  <!-- 根据用户id找到中间表user_role包含用户id的所有信息 -->
  <select id="selectUserAndRoleListByUserId" resultType="com.wnn.system.domain.system.UserAndRole">
    SELECT * FROM user_role  ur where  ur.userId= #{userId}
  </select>

  <select id="selectUserByUsername" resultType="com.wnn.system.domain.system.User">
       SELECT * FROM  user  where  username= #{username}
  </select>

    <!--批量新增user_role中间表  -->
  <insert id="batchInsertUserAndRoleList">
    INSERT INTO user_role VALUES
    <foreach collection="userAndRoleList" item="i"  separator=",">
      (#{i.userRoleId},#{i.userId}, #{i.roleId})
    </foreach>

  </insert>

  <!-- 批量删除user_role中间表数据 根据用户id和角色Id  -->
  <delete id="batchDeleteUserAndRoleListByUserIdAndRoleIds">
    DELETE FROM user_role
    WHERE userId = #{userId}
    AND roleId in
    <foreach collection="ids" item="id"  open="(" close=")" separator=",">
      #{id}
    </foreach>

  </delete>


</mapper>